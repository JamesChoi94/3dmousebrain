Geo2Sra_path <- './LipidModule/results/QueryGEO/'
queried_runs <- list.files(path = Geo2Sra_path, full.names = TRUE)
samplesheet_path <- './LipidModule/data/samplesheet.csv'
samplesheet <- read.csv(samplesheet_path)
if (length(queried_runs) == 0) {
stop(paste('No query results found in', Geo2Sra_path))
}
queried_runs <- lapply(
X = queried_runs,
FUN = readLines
)
headers <- lapply(queried_runs, `[`, 1)
identicalValue <- function(x, y) if (identical(x, y)) x else FALSE
identical_headers <- Reduce(f = identicalValue, x = headers)
if (isFALSE(identical_headers)) {
stop('Headers of query result files are not identical across runs.')
} else {
identical_headers <- unlist(strsplit(identical_headers, split = ','))
}
# unlist for potential multiple SRA to single GSM mappings
queried_runs <- unlist(sapply(queried_runs, function(a) a[2:length(a)]))
queried_runs <- strsplit(x = queried_runs, split = ',')
queried_runs <- do.call(what = rbind.data.frame, args = queried_runs)
colnames(queried_runs) <- identical_headers
names(queried_runs)[names(queried_runs) == 'SampleName'] <- colnames(samplesheet)[1]
samplesheet <- merge(samplesheet, queried_runs, by.y = 'GSM_Accession')
head(samplesheet)
Geo2Sra_path <- './LipidModule/results/QueryGEO/'
queried_runs <- list.files(path = Geo2Sra_path, full.names = TRUE)
samplesheet_path <- './LipidModule/data/samplesheet.csv'
samplesheet <- read.csv(samplesheet_path)
if (length(queried_runs) == 0) {
stop(paste('No query results found in', Geo2Sra_path))
}
queried_runs <- lapply(
X = queried_runs,
FUN = readLines
)
headers <- lapply(queried_runs, `[`, 1)
identicalValue <- function(x, y) if (identical(x, y)) x else FALSE
identical_headers <- Reduce(f = identicalValue, x = headers)
if (isFALSE(identical_headers)) {
stop('Headers of query result files are not identical across runs.')
} else {
identical_headers <- unlist(strsplit(identical_headers, split = ','))
}
# unlist for potential multiple SRA to single GSM mappings
queried_runs <- unlist(sapply(queried_runs, function(a) a[2:length(a)]))
queried_runs <- strsplit(x = queried_runs, split = ',')
queried_runs <- do.call(what = rbind.data.frame, args = queried_runs)
colnames(queried_runs) <- identical_headers
names(queried_runs)[names(queried_runs) == 'SampleName'] <- colnames(samplesheet)[1]
compile_out <- merge(queried_runs, samplesheet, by.y = 'GSM_Accession')
dim(compile_out)
compile_out$GSM_Accession
View(compile_out)
?merge
compile_out <- merge(queried_runs, samplesheet, by.y = 'GSM_Accession',
all.x = TRUE)
dim(compile_out)
colnames(compile_out)
colnames(samplesheet)
Geo2Sra_path <- './LipidModule/results/QueryGEO/'
queried_runs <- list.files(path = Geo2Sra_path, full.names = TRUE)
samplesheet_path <- './LipidModule/data/samplesheet.csv'
samplesheet <- read.csv(samplesheet_path)
if (length(queried_runs) == 0) {
stop(paste('No query results found in', Geo2Sra_path))
}
queried_runs <- lapply(
X = queried_runs,
FUN = readLines
)
headers <- lapply(queried_runs, `[`, 1)
identicalValue <- function(x, y) if (identical(x, y)) x else FALSE
identical_headers <- Reduce(f = identicalValue, x = headers)
if (isFALSE(identical_headers)) {
stop('Headers of query result files are not identical across runs.')
} else {
identical_headers <- unlist(strsplit(identical_headers, split = ','))
}
# unlist for potential multiple SRA to single GSM mappings
queried_runs <- unlist(sapply(queried_runs, function(a) a[2:length(a)]))
queried_runs <- strsplit(x = queried_runs, split = ',')
queried_runs <- do.call(what = rbind.data.frame, args = queried_runs)
colnames(queried_runs) <- identical_headers
names(queried_runs)[names(queried_runs) == 'SampleName'] <- 'GSM_Accession'
names(queried_runs)[names(queried_runs) == 'Run'] <- 'SRR_Accession'
compile_out <- merge(x = queried_runs,
y = samplesheet,
by.y = 'GSM_Accession',
all.x = TRUE)
samplesheet_out <- compile_out[c('GSM_Accession','SRR_Accession', colnames(samplesheet)[2:ncol(samplesheet)])]
head(samplesheet_out)
file = paste(Geo2Sra_path, 'gsm2sra_query_compiled.csv')
Geo2Sra_path
rm(file)
write.csv(x = compile_out,
file = paste(Geo2Sra_path, 'gsm2sra_query_compiled.csv'))
write.csv(x = compile_out,
file = paste(Geo2Sra_path, 'gsm2sra_query_compiled.csv'),
row.names = FALSE)
write.csv(x = samplesheet_out,
file = samplesheet_path,
row.names = FALSE)
gsub(pattern = 'samplesheet.csv',
replacement = 'samplesheet_appended.csv',
x = samplesheet_path)
write.csv(x = samplesheet_out,
file = gsub(pattern = 'samplesheet.csv',
replacement = 'samplesheet_appended.csv',
x = samplesheet_path),
row.names = FALSE)
?list.files()
Geo2Sra_path <- './LipidModule/results/QueryGEO/'
queried_runs <- readLines('./LipidModule/results/QueryGEO/esearch-runinfo.txt')
query_path <- './LipidModule/results/QueryGEO/esearch-runinfo.txt'
queries <- readLines(con = query_path)
rm(list = ls())
gc()
query_path <- './LipidModule/results/QueryGEO/esearch-runinfo.txt'
queries <- readLines(con = query_path)
queries
unique(queries)
strsplit(unique(queries), ',')
do.call(what = rbind.data.frame, strsplit(unique(queries), ','))
?rbind.data.frame
?do.call
do.call(what = rbind.data.frame,
args = list(strsplit(unique(queries), ','),
make.row.names = FALSE))
args = list(strsplit(unique(queries), ','))
rm9args
rm(args)
do.call(what = rbind.data.frame, strsplit(unique(queries), ','))
strsplit(unique(queries), ',')
do.call(what = rbind.data.frame, strsplit(unique(queries), ','))
Reduce(rbind, strsplit(unique(queries), ','))
strsplit(unique(queries), ',')
tmp <- do.call(rbind.data.frame, args = tmp[2:length(tmp)])
query_path <- './LipidModule/results/QueryGEO/esearch-runinfo.txt'
queries <- readLines(con = query_path)
tmp <- strsplit(unique(queries), ',')
queries <- do.call(rbind.data.frame, args = tmp[2:length(tmp)])
colnames(queries) <- tmp[[1]]
View(queries)
queries$Run
sapply(queries, class)
reads <- list.files(path = './data/rawdata', pattern = '*_{1,2}.fastq')
reads <- list.files(path = './data/rawdata', pattern = '*_[1,2].fastq')
reads <- list.files(path = './data/rawdata', pattern = '\\*_[1,2].fastq')
reads <- list.files(path = './data/rawdata', pattern = '\\*_[1-2].fastq')
reads <- list.files(path = './data/rawdata', pattern = '\\*.fastq')
reads <- list.files(path = './data/rawdata/', pattern = '\\*.fastq')
reads <- list.files(path = './data/rawdata/')
reads <- list.files(path = 'D:/LipidModule/data/rawdata/', pattern = '\\*.fastq')
reads <- list.files(path = 'D:/LipidModule/data/rawdata/')
reads <- list.files(path = 'D:/LipidModule/data/rawdata/', , pattern = '*.fastq')
reads <- list.files(path = 'D:/LipidModule/data/rawdata/', , pattern = '*.fastq')
readsDir <- 'D:/LipidModule/data/rawdata/'
readsDir <- list.files(path = 'D:/LipidModule/data/rawdata/', , pattern = '*.fastq')
reads
readsDir <- list.files('D:/LipidModule/data/rawdata/')
reads_check <- c("SRR789190_1.fastq", "SRR789190_2.fastq")
reads_done <- list.files('D:/LipidModule/data/rawdata/')
reads_check[!reads_check %in% reads_done]
reads_check <- c("SRR789190_1.fastq", "SRR789190_2.fastq")
reads_done <- list.files('D:/LipidModule/data/rawdata/')
reads_done
tmp <- read.table(file = 'G:/Shared drives/Current Members/James Choi/PlateResultsSusana.txt', skip = 10)
head(tmp)
tmp <- read.table(file = 'G:/Shared drives/Current Members/James Choi/PlateResultsSusana.txt', skip = 9)
tmp
tmp <- read.table(file = 'G:/Shared drives/Current Members/James Choi/PlateResultsSusana.txt', skip = 4)
tmp <- read.table(file = 'G:/Shared drives/Current Members/James Choi/PlateResultsSusana.txt', skip = 6)
tmp <- read.table(file = 'G:/Shared drives/Current Members/James Choi/PlateResultsSusana.txt', skip = 9)
head(tmp)
tmp <- read.table(file = 'G:/Shared drives/Current Members/James Choi/PlateResultsSusana.txt', skip = 8, header = TRUE)
head(tmp)
tmp <- read.table(file = 'G:/Shared drives/Current Members/James Choi/PlateResultsSusana.txt', skip = 9)
tmp <- read.table(file = 'G:/Shared drives/Current Members/James Choi/PlateResultsSusana.txt', skip = 8)
head(tmp)
tmp <- read.table(file = 'G:/Shared drives/Current Members/James Choi/PlateResultsSusana.txt', skip = 7)
head(tmp)
tmp <- read.table(file = 'G:/Shared drives/Current Members/James Choi/PlateResultsSusana.txt', skip = 9, sep = '\t')
head(tmp)
tmp <- read.table(file = 'G:/Shared drives/Current Members/James Choi/PlateResultsSusana.txt', skip = 8, sep = '\t')
head(tmp)
tmp <- read.table(file = 'G:/Shared drives/Current Members/James Choi/PlateResultsSusana.txt', skip = 9, sep = '\t', header = TRUE)
head(tmp)
tmp <- read.table(file = 'G:/Shared drives/Current Members/James Choi/PlateResultsSusana.txt', skip = 8, sep = '\t', header = TRUE)
head(tmp)
View(tmp)
colnames(tmp)
library(dplyr)
tmp %>%
group_by(Row, Column)
sapply(tmp, class)
View(tmp)
tmp %>%
group_by(Row, Column) %>%
arrange(Row, Column)
colnames(tmp)
# 1:11
take <- c("pDAPI....Number.of.Objects",
"pDAPI..Alexa647....Number.of.Objects",
"pDAPI..Alexa647....Corrected.Spot.Intensity..Mean.per.Cell....Mean.per.Well",
"pDAPI..Alexa647....Intensity.Spot.Alexa.488.Mean..Mean.per.Cell....Mean.per.Well",
"pDAPI..Alexa647....Number.of.Spots..per.Cell....Mean.per.Well",
"Formula.Output..Corrected.Intensity...Number.",
"Formula.Output..Mean.Intensity...Number.")
length(take)
tmp %>%
group_by(Row, Column) %>%
arrange(Row, Column) %>%
select(take)
tmp %>%
group_by(Row, Column) %>%
arrange(Row, Column) %>%
select(all_of(take))
reshape2::melt(id.vars = c('Row','Column'))
tmp %>%
group_by(Row, Column) %>%
arrange(Row, Column) %>%
select(all_of(take)) %>%
reshape2::melt(id.vars = c('Row','Column'))
tmp %>%
group_by(Row, Column) %>%
arrange(Row, Column) %>%
select(all_of(take)) %>%
reshape2::melt(id.vars = c('Row','Column')) %>%
View(0)
tmp %>%
group_by(Row, Column) %>%
arrange(Row, Column) %>%
select(all_of(take)) %>%
reshape2::melt(id.vars = c('Row','Column')) %>%
View()
tmp <- tmp %>%
group_by(Row, Column) %>%
arrange(Row, Column) %>%
select(all_of(take)) %>%
reshape2::melt(id.vars = c('Row','Column'))
tmp <- read.table(file = 'G:/Shared drives/Current Members/James Choi/PlateResultsSusana.txt', skip = 8, sep = '\t', header = TRUE)
head(tmp)
# 1:11
take <- c("pDAPI....Number.of.Objects",
"pDAPI..Alexa647....Number.of.Objects",
"pDAPI..Alexa647....Corrected.Spot.Intensity..Mean.per.Cell....Mean.per.Well",
"pDAPI..Alexa647....Intensity.Spot.Alexa.488.Mean..Mean.per.Cell....Mean.per.Well",
"pDAPI..Alexa647....Number.of.Spots..per.Cell....Mean.per.Well",
"Formula.Output..Corrected.Intensity...Number.",
"Formula.Output..Mean.Intensity...Number.")
tmp <- tmp %>%
group_by(Row, Column) %>%
arrange(Row, Column) %>%
select(all_of(take)) %>%
reshape2::melt(id.vars = c('Row','Column')) %>%
ungroup()
tmp <- split(tmp, f = variable)
tmp <- split(tmp, f = 'variable')
library(dplyr)
tmp <- read.table(file = 'G:/Shared drives/Current Members/James Choi/PlateResultsSusana.txt', skip = 8, sep = '\t', header = TRUE)
head(tmp)
# 1:11
take <- c("pDAPI....Number.of.Objects",
"pDAPI..Alexa647....Number.of.Objects",
"pDAPI..Alexa647....Corrected.Spot.Intensity..Mean.per.Cell....Mean.per.Well",
"pDAPI..Alexa647....Intensity.Spot.Alexa.488.Mean..Mean.per.Cell....Mean.per.Well",
"pDAPI..Alexa647....Number.of.Spots..per.Cell....Mean.per.Well",
"Formula.Output..Corrected.Intensity...Number.",
"Formula.Output..Mean.Intensity...Number.")
tmp <- tmp %>%
group_by(Row, Column) %>%
arrange(Row, Column) %>%
select(all_of(take)) %>%
reshape2::melt(id.vars = c('Row','Column')) %>%
ungroup()
tmp <- split(tmp, f = tmp$variable)
tmp$pDAPI....Number.of.Objects
tmp <- lapply(
X = tmp,
FUN = function(x) {
reshape2::acast(data = x, formula = Row ~ Column)
}
)
View(tmp$pDAPI....Number.of.Objects)
dir.create(path = 'G:/Shared drives/Current Members/James Choi/Susana_stuff')
names(tmp) <- take
i <- 1
names(tmp)[i]
tmp_filename <- gsub(pattern = '\\.', replacement = '_', x = tmp_filename)
tmp_filename <- names(tmp)[i]
tmp_filename <- gsub(pattern = '\\.', replacement = '_', x = tmp_filename)
tmp_filename
paste('G:/Shared drives/Current Members/James Choi/Susana_stuff/', tmp_filename)
paste0('G:/Shared drives/Current Members/James Choi/Susana_stuff/', tmp_filename)
tmp_filename <- paste0('G:/Shared drives/Current Members/James Choi/Susana_stuff/', tmp_filename, '.tsv')
tmp_filename
write.csv(file = tmp_filename,
x = tmp[[i]],
sep = '\t')
write.table(file = tmp_filename,
x = tmp[[i]],
sep = '\t')
write.table(file = tmp_filename,
x = tmp[[i]],
sep = '\t',
col.names = NA)
tmp[[i]]
source("~/.active-rstudio-document", echo=TRUE)
# Data processing is done with the dplyr R package.
# To install, run the following:
# install.packages('dplyr')
library(dplyr)
# Load in data
tmp <- read.table(file = 'G:/Shared drives/Current Members/James Choi/PlateResultsSusana.txt', skip = 8, sep = '\t', header = TRUE)
# Inspect the data table to make sure it loaded properly
head(tmp)
# Indicate which columns (i.e.measurement variables) to extract from the data table
take <- c("pDAPI....Number.of.Objects",
"pDAPI..Alexa647....Number.of.Objects",
"pDAPI..Alexa647....Corrected.Spot.Intensity..Mean.per.Cell....Mean.per.Well",
"pDAPI..Alexa647....Intensity.Spot.Alexa.488.Mean..Mean.per.Cell....Mean.per.Well",
"pDAPI..Alexa647....Number.of.Spots..per.Cell....Mean.per.Well",
"Formula.Output..Corrected.Intensity...Number.",
"Formula.Output..Mean.Intensity...Number.")
# Group the data table by (rows, columns) and "pivot" the table into long format i.e. columns are now "row", "column", "variable", and "value"
tmp <- tmp %>%
group_by(Row, Column) %>%
arrange(Row, Column) %>%
select(all_of(take)) %>%
reshape2::melt(id.vars = c('Row','Column')) %>%
ungroup()
# Split the long data table by measurement variable.
tmp <- split(tmp, f = tmp$variable)
# For each measurement variable, re-format the data table from long to wide format with Rows and Columns in plate format.
tmp <- lapply(
X = tmp,
FUN = function(x) {
reshape2::acast(data = x, formula = Row ~ Column)
}
)
# Create new folder to save each of the resulting data tables.
newFileName = 'G:/Shared drives/Current Members/James Choi/Susana_stuff'
if(!dir.exists(newFileName)){
dir.create(path = newFileName)
}else{
overwrite = readline(prompt = "Directory already exists, overwrite files? Y/N: ")
if(overwrite %in% c('N','n')){
blankMsg <- sprintf("\r%s\r", paste(rep(" ", getOption("width")-1L), collapse=" "))
stop(simpleError(blankMsg))
}
}
N
names(tmp) <- take
i <- 1
# Periods in measurement variable names are replaced with underscores to prevent errors with file names.
tmp_filename <- names(tmp)[i]
tmp_filename <- gsub(pattern = '\\.', replacement = '_', x = tmp_filename)
tmp_filename <- paste0('G:/Shared drives/Current Members/James Choi/Susana_stuff/', tmp_filename, '.tsv')
write.table(file = tmp_filename,
x = tmp[[i]],
sep = '\t',
col.names = FALSE,
row.names = FALSE)
tmp_filename
names(tmp) <- take
for (i in 1:length(tmp)) {
# Periods in measurement variable names are replaced with underscores to prevent errors with file names.
tmp_filename <- names(tmp)[i]
tmp_filename <- gsub(pattern = '\\.', replacement = '_', x = tmp_filename)
tmp_filename <- paste0('G:/Shared drives/Current Members/James Choi/Susana_stuff/', tmp_filename, '.tsv')
write.table(file = tmp_filename,
x = tmp[[i]],
sep = '\t',
col.names = FALSE,
row.names = FALSE)
}
tmp_filename
names(tmp)
# To install, run the following:
# install.packages('dplyr')
library(dplyr)
# Load in data
tmp <- read.table(file = 'G:/Shared drives/Current Members/James Choi/PlateResultsSusana.txt', skip = 8, sep = '\t', header = TRUE)
# Inspect the data table to make sure it loaded properly
head(tmp)
# Indicate which columns (i.e.measurement variables) to extract from the data table
take <- c("pDAPI....Number.of.Objects",
"pDAPI..Alexa647....Number.of.Objects",
"pDAPI..Alexa647....Corrected.Spot.Intensity..Mean.per.Cell....Mean.per.Well",
"pDAPI..Alexa647....Intensity.Spot.Alexa.488.Mean..Mean.per.Cell....Mean.per.Well",
"pDAPI..Alexa647....Number.of.Spots..per.Cell....Mean.per.Well",
"Formula.Output..Corrected.Intensity...Number.",
"Formula.Output..Mean.Intensity...Number.")
# Group the data table by (rows, columns) and "pivot" the table into long format i.e. columns are now "row", "column", "variable", and "value"
tmp <- tmp %>%
group_by(Row, Column) %>%
arrange(Row, Column) %>%
select(all_of(take)) %>%
reshape2::melt(id.vars = c('Row','Column')) %>%
ungroup()
# Split the long data table by measurement variable.
tmp <- split(tmp, f = tmp$variable)
# For each measurement variable, re-format the data table from long to wide format with Rows and Columns in plate format.
tmp <- lapply(
X = tmp,
FUN = function(x) {
reshape2::acast(data = x, formula = Row ~ Column)
}
)
tmp$pDAPI....Number.of.Objects
# To install, run the following:
# install.packages('dplyr')
library(dplyr)
# Load in data
tmp <- read.table(file = 'G:/Shared drives/Current Members/James Choi/PlateResultsSusana.txt', skip = 8, sep = '\t', header = TRUE)
# Inspect the data table to make sure it loaded properly
head(tmp)
# Indicate which columns (i.e.measurement variables) to extract from the data table
take <- c("pDAPI....Number.of.Objects",
"pDAPI..Alexa647....Number.of.Objects",
"pDAPI..Alexa647....Corrected.Spot.Intensity..Mean.per.Cell....Mean.per.Well",
"pDAPI..Alexa647....Intensity.Spot.Alexa.488.Mean..Mean.per.Cell....Mean.per.Well",
"pDAPI..Alexa647....Number.of.Spots..per.Cell....Mean.per.Well",
"Formula.Output..Corrected.Intensity...Number.",
"Formula.Output..Mean.Intensity...Number.")
# Group the data table by (rows, columns) and "pivot" the table into long format i.e. columns are now "row", "column", "variable", and "value"
tmp <- tmp %>%
group_by(Row, Column) %>%
arrange(Row, Column) %>%
select(all_of(take)) %>%
reshape2::melt(id.vars = c('Row','Column')) %>%
ungroup()
# Split the long data table by measurement variable.
tmp <- split(tmp, f = tmp$variable)
# For each measurement variable, re-format the data table from long to wide format with Rows and Columns in plate format.
tmp <- lapply(
X = tmp,
FUN = function(x) {
y <- reshape2::acast(data = x, formula = Row ~ Column)
y <- y[rev(1:nrow(y)),]
}
)
tmp$pDAPI....Number.of.Objects
names(tmp) <- take
for (i in 1:length(tmp)) {
# Periods in measurement variable names are replaced with underscores to prevent errors with file names.
tmp_filename <- names(tmp)[i]
tmp_filename <- gsub(pattern = '\\.', replacement = '_', x = tmp_filename)
tmp_filename <- paste0('G:/Shared drives/Current Members/James Choi/Susana_stuff/', tmp_filename, '.tsv')
write.table(file = tmp_filename,
x = tmp[[i]],
sep = '\t',
col.names = FALSE,
row.names = FALSE)
}
source("D:/3dmousebrain/3dmousebrain/tidy-references.R", echo=TRUE)
library(dplyr)
library(tidyr)
setwd('D:/3dmousebrain/3dmousebrain/')
refs <- read.csv(file = 'brain-references.csv')
refs_clean <- refs %>%
mutate(Reference = gsub(pattern = ' Epub[^\\.]+\\.',
replacement = '',
x = Reference)) %>%
separate(Reference,
remove = FALSE,
sep = '\\. ',
into = c('Authors',
'ArticleTitle',
'JournalTitle',
'DateVolumeIssueLocation',
'DOI',
'Identifiers',
'URL'))
refs_clean <- apply(
X = refs_clean,
MARGIN = 2,
FUN = function(x) {x[nchar(x) == 0] <- NA; return(x)}
)
refs_clean
refs_clean
head(refs_clean)
library(dplyr)
library(tidyr)
setwd('D:/3dmousebrain/3dmousebrain/')
refs <- read.csv(file = 'brain-references.csv')
refs_clean <- refs %>%
mutate(Reference = gsub(pattern = ' Epub[^\\.]+\\.',
replacement = '',
x = Reference)) %>%
separate(Reference,
remove = FALSE,
sep = '\\. ',
into = c('Authors',
'ArticleTitle',
'JournalTitle',
'DateVolumeIssueLocation',
'DOI',
'Identifiers',
'URL'))
refs_clean <- apply(
X = refs_clean,
MARGIN = 2,
FUN = function(x) {x[nchar(x) == 0] <- NA; return(x)}
) %>% as.data.frame()
refs_clean <- refs_clean[order(refs_clean$BrainRegion),]
refs_clean
View(refs_clean)
source("D:/3dmousebrain/3dmousebrain/tidy-references.R", echo=TRUE)
